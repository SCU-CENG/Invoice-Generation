<?xml version="1.0" encoding="UTF-8"?><Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2" xmlns:ns10="urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2" xmlns:ns11="urn:oasis:names:specification:ubl:schema:xsd:ReceiptAdvice-2" xmlns:ns8="urn:oasis:names:specification:ubl:schema:xsd:ApplicationResponse-2" xmlns:ns9="urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2" xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 UBL-Invoice-2.1.xsd">
    <ext:UBLExtensions>
        <ext:UBLExtension>
            <ext:ExtensionContent><ds:Signature Id="Signature_FaturaNo"><ds:SignedInfo Id="SignedInfo_FaturaNo"><ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments"/><ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/><ds:Reference URI=""><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/><ds:DigestValue>oZMOP+9y6hkPGuouWKnA/iirWCW4PVJuIew/qcgTnVw=</ds:DigestValue></ds:Reference><ds:Reference Id="SignedProperties-Reference_FaturaNo" Type="http://uri.etsi.org/01903#SignedProperties" URI="#SignedProperties_FaturaNo"><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/><ds:DigestValue>FpudSl5C6LGXc2Dp0h/G+/lARnd8vLkoLZPzpwjJH54=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue Id="id1">qxVQUR3+xLQi6L70js18QswgihzefVNmA17LCwYJlixGhOiLgiuKpJQeBYOL4zDs+Xwc9h8ua1uI
VnJIDHkFAuCmzmYs28Ck0fI76VbBwOpFxylG1g+309BVWhVghMs6eebKO4a4hrN++sHcVhH7itsf
J2FoZ/YG90pz+eA7lsn8JLLSI18YjuYPlG9YJni2kkKCornl3uIkzE3bLrzmVCtXY0knN/BzTftb
KYIDNKKv7oAu2/1doaT1wsnCta1MWXZzUKN+fbmAYvIPohRPwXdyDspuGhumfWaaSw5duPinBXHH
zXZ/VAGWGo0Qs09jibsfPhHydKakg5FFrnv8jA==</ds:SignatureValue><ds:KeyInfo><ds:KeyValue><ds:RSAKeyValue><ds:Modulus>1kBkOMnNrqg5Ec6/+/uvYx1jhjs8n4vfAunDtE9zDqCSberoIm/cD8XSwIm+4UdjSji8Ti5GL+v3
UmZaruzUVqFVb+veuj6rZR038qnRA65/wDHivpc764fAPy/5o3GQcqTuB7hrctoQqsIt3gIOVIph
CtBuGiQDgkFqiZ2kClbSAJ9BG7q0nVN3gECCxBtYBp2PmDbQY4jhtuvD0PGjYJZyO69g5ZDysW++
b6tQwYSQ5LhXxK8nW3B8794T5KWJR4f7dqsq7KDBSdRODbwkeJz9IDoONURmVnqdQOBMuY+6HUac
3zwVhMYvSvB6c41xsjdFz+CD3P1FIkrVAxBqYQ==</ds:Modulus><ds:Exponent>AQAB</ds:Exponent></ds:RSAKeyValue></ds:KeyValue><ds:X509Data><ds:X509SubjectName>CN=Gelir İdaresi Başkanlığı,2.5.4.5=#130a33393030333833363639</ds:X509SubjectName><ds:X509Certificate>MIIFljCCBH6gAwIBAgIIAOBC3S4Hj8EwDQYJKoZIhvcNAQELBQAwXDELMAkGA1UEBhMCVFIxTTBL
BgNVBAMMRE1hbGkgTcO8aMO8ciBFbGVrdHJvbmlrIFNlcnRpZmlrYSBIaXptZXQgU2HEn2xhecSx
Y8Sxc8SxIC0gU8O8csO8bSAyMB4XDTE5MTEwNTA4NTgzM1oXDTI0MTEwMzA4NTgzM1owPTETMBEG
A1UEBRMKMzkwMDM4MzY2OTEmMCQGA1UEAwwdR2VsaXIgxLBkYXJlc2kgQmHFn2thbmzEscSfxLEw
ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDWQGQ4yc2uqDkRzr/7+69jHWOGOzyfi98C
6cO0T3MOoJJt6ugib9wPxdLAib7hR2NKOLxOLkYv6/dSZlqu7NRWoVVv6966PqtlHTfyqdEDrn/A
MeK+lzvrh8A/L/mjcZBypO4HuGty2hCqwi3eAg5UimEK0G4aJAOCQWqJnaQKVtIAn0EburSdU3eA
QILEG1gGnY+YNtBjiOG268PQ8aNglnI7r2DlkPKxb75vq1DBhJDkuFfErydbcHzv3hPkpYlHh/t2
qyrsoMFJ1E4NvCR4nP0gOg41RGZWep1A4Ey5j7odRpzfPBWExi9K8HpzjXGyN0XP4IPc/UUiStUD
EGphAgMBAAGjggJ5MIICdTAfBgNVHSMEGDAWgBQDhPqXMef0hxkvZSvhtBtjp691vjAdBgNVHQ4E
FgQUmtCf4u8/4mOSYqPBT+F4b9a22JwwDgYDVR0PAQH/BAQDAgeAMIIBMwYDVR0gBIIBKjCCASYw
ggEiBgtghhgBAgEBBQcEATCCAREwKgYIKwYBBQUHAgEWHmh0dHA6Ly9kZXBvLmthbXVzbS5nb3Yu
dHIvaWxrZTCB4gYIKwYBBQUHAgIwgdUegdIAQgB1ACAAcwBlAHIAdABpAGYAaQBrAGEAIABpAGwA
ZQAgAGkAbABnAGkAbABpACAAcwBlAHIAdABpAGYAaQBrAGEAIAB1AHkAZwB1AGwAYQBtAGEAIABl
AHMAYQBzAGwAYQByATEAbgExACAAbwBrAHUAbQBhAGsAIABpAOcAaQBuACAAYgBlAGwAaQByAHQA
aQBsAGUAbgAgAHcAZQBiACAAcwBpAHQAZQBzAGkAbgBpACAAegBpAHkAYQByAGUAdAAgAGUAZABp
AG4AaQB6AC4wDAYDVR0TAQH/BAIwADAWBgNVHSUEDzANBgtghhgBAgEBBQcyATBBBgNVHR8EOjA4
MDagNKAyhjBodHRwOi8vZGVwby5rYW11c20uZ292LnRyL2t1cnVtc2FsL21tZXNocy1zMi5jcmww
gYIGCCsGAQUFBwEBBHYwdDA8BggrBgEFBQcwAoYwaHR0cDovL2RlcG8ua2FtdXNtLmdvdi50ci9r
dXJ1bXNhbC9tbWVzaHMtczIuY3J0MDQGCCsGAQUFBzABhihodHRwOi8vY2lzZHVwbW1zMi5rdXJ1
bXNhbC5rYW11c20uZ292LnRyMA0GCSqGSIb3DQEBCwUAA4IBAQCh/MfWdhBPUtbVbsRTzCe8JUcV
+6Szk2UVcUnkv/U9lD7fEz0OGFKThhJ2Q0znH4cF85czDx44W225uwd5UMDq+utMPZj4Mx6B6NuV
CiDyVtX81keezahdsNL6oYrkAzrN7Dmd2uqkm873v5UvjJZ8zPX0RLgDmyuqEMfES52DfFH0PbA4
RVktLoaOyrb/6equWW2sgw3UkXFaz84hTzBAJ/Li5RN0gHCQRI/6bqIhKmI69shb8nkYlMKWxi/K
rFaF2CpCdtdCBe4bj1G7d2lL3NnpgwZXHUBHpxLnrJzmc0tH38TAn4y3jSNyR1N/qkX4mKBiZB34
NUcDN3uU6qqJ</ds:X509Certificate></ds:X509Data></ds:KeyInfo><ds:Object><xades:QualifyingProperties Target="#Signature_FaturaNo"><xades:SignedProperties Id="SignedProperties_FaturaNo"><xades:SignedSignatureProperties><xades:SigningTime>2022-04-04T09:48:24.061+03:00</xades:SigningTime><xades:SigningCertificate><xades:Cert><xades:CertDigest><ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/><ds:DigestValue>qIKwiL60qoDYic31su8T1JHJtXYaP+bUaqbLEK+bGss=</ds:DigestValue></xades:CertDigest><xades:IssuerSerial><ds:X509IssuerName>CN=Mali Mühür Elektronik Sertifika Hizmet Sağlayıcısı - Sürüm 2, C=TR</ds:X509IssuerName><ds:X509SerialNumber>63123912510640065</ds:X509SerialNumber></xades:IssuerSerial></xades:Cert></xades:SigningCertificate><xades:SignerRole><xades:ClaimedRoles><xades:ClaimedRole>Tedarikçi</xades:ClaimedRole></xades:ClaimedRoles></xades:SignerRole></xades:SignedSignatureProperties></xades:SignedProperties></xades:QualifyingProperties></ds:Object></ds:Signature></ext:ExtensionContent>
        </ext:UBLExtension>
    </ext:UBLExtensions>
    <cbc:UBLVersionID>2.1</cbc:UBLVersionID>
    <cbc:CustomizationID>TR1.2</cbc:CustomizationID>
    <cbc:ProfileID>EARSIVFATURA</cbc:ProfileID>
    <cbc:ID>GIB2000000000001</cbc:ID>
    <cbc:CopyIndicator>false</cbc:CopyIndicator>
    <cbc:UUID>959c5ede-10da-4879-8b71-797d59259993</cbc:UUID>
    <cbc:IssueDate>2000-01-01</cbc:IssueDate>
    <cbc:IssueTime>09:37:55.475</cbc:IssueTime>
    <cbc:InvoiceTypeCode>TEVKIFAT</cbc:InvoiceTypeCode>
    <cbc:Note>H802-SAS4500155576 H802-SAS4555120857 H802-SAS4500551274 TEKLİF NO:22055-22025 VE 22526</cbc:Note>
    <cbc:DocumentCurrencyCode>TRY</cbc:DocumentCurrencyCode>
    <cbc:LineCountNumeric>7</cbc:LineCountNumeric>
	<cac:DespatchDocumentReference>
        <cbc:ID>205564</cbc:ID>
        <cbc:IssueDate>2001-01-02</cbc:IssueDate>
    </cac:DespatchDocumentReference>
	<cac:OrderReference>
        <cbc:ID>123456789010</cbc:ID>
        <cbc:IssueDate>2000-01-22</cbc:IssueDate>
    </cac:OrderReference>
    <cac:AdditionalDocumentReference>
        <cbc:ID>16l1izg8w11sa5</cbc:ID>
        <cbc:IssueDate>2000-01-01</cbc:IssueDate>
        <cbc:DocumentType>XSLT</cbc:DocumentType>
        <cac:Attachment>
            <cbc:EmbeddedDocumentBinaryObject characterSetCode="UTF-8" encodingCode="Base64" filename="GIB2022000000065.xslt" mimeCode="application/xml"></cbc:EmbeddedDocumentBinaryObject>
        </cac:Attachment>
    </cac:AdditionalDocumentReference>
    <cac:Signature>
        <cbc:ID schemeID="VKN_TCKN">1234567890</cbc:ID>
        <cac:SignatoryParty>
            <cac:PartyIdentification>
                <cbc:ID schemeID="VKN">2345678901</cbc:ID>
            </cac:PartyIdentification>
            <cac:PostalAddress>
                <cbc:Room>6 2 7</cbc:Room>
                <cbc:StreetName/>
                <cbc:BuildingName/>
                <cbc:BuildingNumber/>
                <cbc:CitySubdivisionName>ZEYTİNKURDU</cbc:CitySubdivisionName>
                <cbc:CityName>Ankara</cbc:CityName>
                <cbc:PostalZone/>
                <cbc:Region/>
                <cac:Country>
                    <cbc:Name>Türkiye</cbc:Name>
                </cac:Country>
            </cac:PostalAddress>
        </cac:SignatoryParty>
        <cac:DigitalSignatureAttachment>
            <cac:ExternalReference>
                <cbc:URI>#Signature_GIB2000000000001</cbc:URI>
            </cac:ExternalReference>
        </cac:DigitalSignatureAttachment>
    </cac:Signature>
    <cac:AccountingSupplierParty>
        <cac:Party>
            <cbc:WebsiteURI>www.demiraj.com.tr</cbc:WebsiteURI>
            <cac:PartyIdentification>
                <cbc:ID schemeID="MERSISNO">0234045678900001</cbc:ID>
            </cac:PartyIdentification>
            <cac:PartyIdentification>
                <cbc:ID schemeID="VKN">3455678901</cbc:ID>
            </cac:PartyIdentification>
			<cac:PartyIdentification>
                <cbc:ID schemeID="TCKN">11223344556</cbc:ID>
            </cac:PartyIdentification>
            <cac:PartyName>
                <cbc:Name>DEMİR NAJ YAZILIM SANAYİ VE TİCARET LİMİTED ŞİRKETİ</cbc:Name>
            </cac:PartyName>
            <cac:PostalAddress>
                <cbc:Room>6 2 7</cbc:Room>
                <cbc:StreetName/>
                <cbc:BuildingName/>
                <cbc:BuildingNumber/>
                <cbc:CitySubdivisionName>ZEYTİNKURDU</cbc:CitySubdivisionName>
                <cbc:CityName>Ankara</cbc:CityName>
                <cbc:PostalZone/>
                <cbc:Region/>
                <cac:Country>
                    <cbc:Name>Türkiye</cbc:Name>
                </cac:Country>
            </cac:PostalAddress>
            <cac:PartyTaxScheme>
                <cac:TaxScheme>
                    <cbc:Name>DAVUTPAŞA VERGİ DAİRESİ MÜD.</cbc:Name>
                </cac:TaxScheme>
            </cac:PartyTaxScheme>
            <cac:Contact>
                <cbc:Telephone>02125550555</cbc:Telephone>
                <cbc:Telefax>02125550362</cbc:Telefax>
                <cbc:ElectronicMail>info@demirnaj.com.tr</cbc:ElectronicMail>
            </cac:Contact>
        </cac:Party>
    </cac:AccountingSupplierParty>
    <cac:AccountingCustomerParty>
        <cac:Party>
            <cbc:WebsiteURI/>
            <cac:PartyIdentification>
                <cbc:ID schemeID="VKN">5678991234</cbc:ID>
            </cac:PartyIdentification>
			<cac:PartyIdentification>
                <cbc:ID schemeID="TCKN">22334455667</cbc:ID>
            </cac:PartyIdentification>
            <cac:PartyName>
                <cbc:Name>OTM ELEKTRİK FABRİKALARI ANONİM ŞİRKETİ</cbc:Name>
            </cac:PartyName>
            <cac:PostalAddress>
                <cbc:Room/>
                <cbc:StreetName>ÇUKUR MAHALLESİ 18 SOKAK NO:22 ALC KAPI NO:66 ÇANKURAN/BURSA</cbc:StreetName>
                <cbc:BuildingName/>
                <cbc:BuildingNumber/>
                <cbc:CitySubdivisionName/>
                <cbc:CityName> </cbc:CityName>
                <cbc:PostalZone/>
                <cbc:Region/>
                <cac:Country>
                    <cbc:Name>Türkiye</cbc:Name>
                </cac:Country>
            </cac:PostalAddress>
            <cac:PartyTaxScheme>
                <cac:TaxScheme>
                    <cbc:Name>BURSA KURUMLAR VERGİ DAİRESİ MÜD.</cbc:Name>
                </cac:TaxScheme>
            </cac:PartyTaxScheme>
            <cac:Contact>
                <cbc:Telephone/>
                <cbc:Telefax/>
                <cbc:ElectronicMail/>
            </cac:Contact>
        </cac:Party>
    </cac:AccountingCustomerParty>
    <cac:AllowanceCharge>
        <cbc:ChargeIndicator>false</cbc:ChargeIndicator>
        <cbc:Amount currencyID="TRY">0</cbc:Amount>
    </cac:AllowanceCharge>
    <cac:TaxTotal>
        <cbc:TaxAmount currencyID="TRY">775.44</cbc:TaxAmount>
        <cac:TaxSubtotal>
            <cbc:TaxableAmount currencyID="TRY">14360</cbc:TaxableAmount>
            <cbc:TaxAmount currencyID="TRY">2584.8</cbc:TaxAmount>
            <cbc:CalculationSequenceNumeric>1</cbc:CalculationSequenceNumeric>
            <cbc:Percent>18</cbc:Percent>
            <cac:TaxCategory>
                <cac:TaxScheme>
                    <cbc:Name>KDV</cbc:Name>
                    <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
                </cac:TaxScheme>
            </cac:TaxCategory>
        </cac:TaxSubtotal>
    </cac:TaxTotal>
    <cac:WithholdingTaxTotal>
        <cbc:TaxAmount currencyID="TRY">1809.36</cbc:TaxAmount>
        <cac:TaxSubtotal>
            <cbc:TaxableAmount currencyID="TRY">2584.8</cbc:TaxableAmount>
            <cbc:TaxAmount currencyID="TRY">1809.36</cbc:TaxAmount>
            <cbc:Percent>70</cbc:Percent>
            <cac:TaxCategory>
                <cac:TaxScheme>
                    <cbc:Name>Makine, Teçhizat, Demirbaş ve Taşıtlara Ait Tadil, Bakım ve Onarım Hizmetleri [KDVGUT- (I/C-2.1.3.2.3)]</cbc:Name>
                    <cbc:TaxTypeCode>603</cbc:TaxTypeCode>
                </cac:TaxScheme>
            </cac:TaxCategory>
        </cac:TaxSubtotal>
    </cac:WithholdingTaxTotal>
    <cac:LegalMonetaryTotal>
        <cbc:LineExtensionAmount currencyID="TRY">14360</cbc:LineExtensionAmount>
        <cbc:TaxExclusiveAmount currencyID="TRY">14360</cbc:TaxExclusiveAmount>
        <cbc:TaxInclusiveAmount currencyID="TRY">16944.8</cbc:TaxInclusiveAmount>
        <cbc:AllowanceTotalAmount currencyID="TRY">0</cbc:AllowanceTotalAmount>
        <cbc:PayableAmount currencyID="TRY">15135.44</cbc:PayableAmount>
    </cac:LegalMonetaryTotal>
    <cac:InvoiceLine>
        <cbc:ID>1</cbc:ID>
        <cbc:InvoicedQuantity unitCode="C62">1</cbc:InvoicedQuantity>
        <cbc:LineExtensionAmount currencyID="TRY">2850</cbc:LineExtensionAmount>
        <cac:AllowanceCharge>
            <cbc:ChargeIndicator>false</cbc:ChargeIndicator>
            <cbc:AllowanceChargeReason/>
            <cbc:MultiplierFactorNumeric>0</cbc:MultiplierFactorNumeric>
            <cbc:Amount currencyID="TRY">0</cbc:Amount>
            <cbc:BaseAmount currencyID="TRY">2850</cbc:BaseAmount>
        </cac:AllowanceCharge>
        <cac:TaxTotal>
            <cbc:TaxAmount currencyID="TRY">153.9</cbc:TaxAmount>
            <cac:TaxSubtotal>
                <cbc:TaxableAmount currencyID="TRY">2850</cbc:TaxableAmount>
                <cbc:TaxAmount currencyID="TRY">513</cbc:TaxAmount>
                <cbc:CalculationSequenceNumeric>1</cbc:CalculationSequenceNumeric>
                <cbc:Percent>18</cbc:Percent>
                <cac:TaxCategory>
                    <cac:TaxScheme>
                        <cbc:Name>KDV</cbc:Name>
                        <cbc:TaxTypeCode>0015</cbc:TaxTypeCode>
                    </cac:TaxScheme>
                </cac:TaxCategory>
            </cac:TaxSubtotal>
        </cac:TaxTotal>
        <cac:WithholdingTaxTotal>
            <cbc:TaxAmount currencyID="TRY">359.1</cbc:TaxAmount>
            <cac:TaxSubtotal>
                <cbc:TaxableAmount currencyID="TRY">513</cbc:TaxableAmount>
                <cbc:TaxAmount currencyID="TRY">359.1</cbc:TaxAmount>
                <cbc:CalculationSequenceNumeric>1</cbc:CalculationSequenceNumeric>
                <cbc:Percent>70</cbc:Percent>
                <cac:TaxCategory>
                    <cac:TaxScheme>
                        <cbc:Name>Makine, Teçhizat, Demirbaş ve Taşıtlara Ait Tadil, Bakım ve Onarım Hizmetleri [KDVGUT- (I/C-2.1.3.2.3)]</cbc:Name>
                        <cbc:TaxTypeCode>603</cbc:TaxTypeCode>
                    </cac:TaxScheme>
                </cac:TaxCategory>
            </cac:TaxSubtotal>
        </cac:WithholdingTaxTotal>
        <cac:Item>
            <cbc:Name>4KW 3000D/D SUMAN DİKEY POMPA MOTORU</cbc:Name>
        </cac:Item>
        <cac:Price>
            <cbc:PriceAmount currencyID="TRY">2850</cbc:PriceAmount>
        </cac:Price>
    </cac:InvoiceLine>
</Invoice>